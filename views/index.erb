<!DOCTYPE html> 
<html> 
	<head> 
		<title>Life Time Fitness Employee Access</title> 
		<%= partial(:_head) %>
	</head>
</head> 
<body> 

	<div data-role="page" data-add-back-btn="true" id="home">
		<div data-role="header">
			<h1>Employee Access</h1>
		</div>
		<div data-role="content">	
			Loading...	
		</div>
		<div data-role="footer">
			<h4 class="username"></h4>
		</div>
	</div>

	<div data-role="page" id="view-my-schedule" data-add-back-btn="true">
		<div data-role="header">
			<h1>My Schedule</h1>
		</div>
		<div data-role="content">	
		</div>
		<div data-role="footer">
			<h4 class="username"></h4>
		</div>
	</div>

	<div data-role="page" id="meeting-details" data-add-back-btn="true">
		<div data-role="header">
			<h1>Appointment</h1>
		</div>
		<div data-role="content">	
		</div>
	</div>

	<div id="my-book-page" data-role="page" data-add-back-btn="true">
		<div data-role="header">
			<h1>My Book</h1>
		</div>
		<div data-role="content">
			Loading...
		</div>
	</div>

	<div id="client-details" data-role="page" data-add-back-btn="true">
		<div data-role="header">
			<h1></h1>
		</div>
		<div data-role="content">	
		</div>
	</div>

	<div id="new-appointment" data-role="page" data-title="New Appointment">
		<div data-role="header">
			<h1>New Appointment</h1>
			<a onclick="window.history.back(); return false;" class="ui-btn-left" data-icon="arrow-l" title="Cancel">Cancel</a>
		</div>
		<div data-role="content">	
		</div>
	</div>

	<div id="member-detail" data-role="page" data-title="Member">
		<div data-role="header">
			<h1>Member</h1>
		</div>
		<div data-role="content">	

		</div>
	</div>

</body>
<%= partial(:_templates) %>
<script type="text/javascript">

$(document).bind("onAuthenticated", function(e, employee){
	$('h4.username').text('Logged-In As: ' + employee.name.full );
	$('#home .ui-header').append('<a class="ui-btn-right" data-ajax="false" data-icon="arrow-u" href="<%= to('/logout') %>">Logout</a>')

	//Create the home page...
	var container = $('#home .ui-content').empty();
	var list = $('<ul data-role="listview"></ul>');
	list.append('<li><a href="" onclick="resetAppointmentWizard({}); return false;">New Appointment</a></li>');
	list.append('<li><a href="#view-my-schedule">Upcoming Schedule</a></li>');
	list.append('<li><a href="#my-book-page">My Book</a></li>');
	container.append(list);
	$('#home').trigger( "create" );
});

$(document).bind("onSessionError", function(e){
	BOSSAPI.log.warn('A session error has occurred... Redirecting to logout.');
	window.location.href = '<%= to('/logout') %>';
});

$( document ).delegate("#view-my-schedule", "pagecreate", refreshMySchedule);
$( document ).delegate("#my-book-page", "pagecreate", refreshMyBook);
$( document ).delegate("#new-appointment", "pagecreate", refreshAppointmentWizard);

function employee(){
  var employee = $(document).data('employee');
  if(employee == undefined) {
  	window.location.href = '<%= to('/') %>';
  }
  return employee;
}

function resetAppointmentWizard(process) {
	$.mobile.changePage("#new-appointment");
	refreshAppointmentWizard(process);
}

function refreshAppointmentWizard(process) {
	var container = $('#new-appointment .ui-content');

	if(process == undefined) {
		process = container.data('appointment-process');
	}

	if(process == undefined) { 
		process = {} 
	};
	
	container.empty();
	if(process['member'] == undefined){
		if(process['memberSource'] == undefined){

			var btn = $('<a href="#" data-role="button" data-theme="b">Select Member From Book</a>');
			btn.click(function(e){
				e.preventDefault();
				process['memberSource'] = 'book';
				refreshAppointmentWizard();
			});
			container.append(btn);

			btn = $('<a href="#" data-role="button">Find Member in MMS</a>');
			btn.click(function(e){
				e.preventDefault();
				process['memberSource'] = 'mms';
				refreshAppointmentWizard();
			});
			container.append(btn);
		}
		else {
			var onSelected = function(member) {
				process['member'] = member;
				refreshAppointmentWizard();
			};

			if(process.memberSource == 'mms') {
				renderMemberSearch(container, onSelected);
			}
			else {
				container.empty().loading({ message : 'Looking up your book'});
				retrieveBook({
					success : function(data){
						createBook(container, data, onSelected);
					}
				});
			}
		}
	}
	else {
		var meeting = process['meeting'];

		if(process.member['membership_id'] == undefined) {
			container.loading({ message : 'Looking up member information' });
			BOSSAPI.auth.user.info({
				data : { member_id : process.member.member_id, },
				success : function(user) {
					if(user.isMember()) {
						process['member'] = user.member;
					}
					refreshAppointmentWizard();
				},
				error : function() {
					alert('Failed to lookup member information.');
				}
			});
		}
		else if(meeting == undefined && process['product'] == undefined) {
			container.empty().loading({ message : 'Loading employee products' }).trigger('create');
			retrieveProducts({
				success : function(products) {
					if(products != undefined && products.length > 0) {

						var onSelected = function(product){
							process['product'] = product;
							refreshAppointmentWizard();
						};

						renderProductSelection(products[0].product.products, container, onSelected);
					}
					else {
						window.history.back();
						alert('No default product assigned to employee.  Please contact BOSS support.');
					}
				},
				error : function() {
					window.history.back();
					alert('Failed to lookup employee products.  Please retry and if the problem persists, contact support.');
				}
			})
		}
		else if (meeting == undefined && (process['date_range'] == undefined || process['resource'] == undefined)) {

			var timeslotContainer = $('<div class="timeslot-selection-container"></div>');
			container.append(timeslotContainer);

			var onSlotSelection = function(selection) {
				process['date_range'] = selection.timeslot;
				process['resource'] = selection.resource;
				refreshAppointmentWizard();
			}

			var dateSelection = createDateSelection(function(date){
				refreshTimeslotSelection(date, timeslotContainer, onSlotSelection);
			});
			container.prepend(dateSelection);

			refreshTimeslotSelection(Date.today(), timeslotContainer, onSlotSelection);
		}
		else {
			//Confirm the appointment here....

			var msg = undefined;
			if(meeting == undefined) {
				msg = BOSSAPI.utils.formatString('Are you sure you want to book a {product} appointment with {name} at {start_date} - {end_date}?',
						{ 
							product: process.product.name,
							name: process.member.name.first + ' ' + process.member.name.last,
							start_date : process.date_range[0].toString('ddd, MMMM d h:mm'), 
							end_date : process.date_range[1].toString('h:mm tt') 
						});
			}
			else {
				msg = BOSSAPI.utils.formatString('Are you sure you want to book {name} for the {product} at {start_date} - {end_date}?',
						{ 
							product: process.meeting.description,
							name: process.member.name.first + ' ' + process.member.name.last,
							start_date : process.meeting.start_date.toString('ddd, MMMM d h:mm'), 
							end_date : process.meeting.end_date.toString('h:mm tt') 
						});
			}
			container.append('<p>' + msg + '</p>');

			var link = $('<a data-role="button" data-theme="b">Confirm</a>');
			link.click(function(e){
				e.preventDefault();

				var registration_key = undefined;
				if(meeting == undefined) {
					registration_key = BOSSAPI.utils.formatString('avail#{resource_id}#{upccode}#{start_date}#{end_date}',{
											resource_id : process.resource.id,
											upccode : process.product.upccode,
											start_date : process.date_range[0].toString('yyyy-MM-ddTHH:mm:ss'),
											end_date : process.date_range[1].toString('yyyy-MM-ddTHH:mm:ss')
										});
				}
				else {
					registration_key = meeting.id;
				}

				createMeeting({
					data : {
						id : registration_key,
						member_id : process.member.member_id
					},
					success : function() {
						window.history.back();
						alert('Your appointment was booked successfully.');
					}
				});
			});
			container.append(link);

			link = $('<a data-role="button">No</a>');
			link.click(function(e){
				e.preventDefault();
				window.history.back();
			});
			container.append(link);
		}
	}

	container.data('appointment-process',process);
	container.trigger('create');
}

function refreshTimeslotSelection(date, container, onSelect) {
	container.empty();

	container.loading({ message: 'Searching your schedule' });

	searchSchedule({
		data : {
			date_range : date.toString('MM/dd/yyyy') + '-' + date.toString('MM/dd/yyyy'),
			publish : [true, false],
			debug : true
		},
		success : function(data) {
			renderTimeslotSelectionSchedule(data, container, onSelect);
		}
	});
}

function renderProductSelection(products, container, onSelect) {
	container.empty();

	var list = $('<ul class="products" data-role="listview"></ul>');
	for(var i = 0 ; i < products.length ; i++) {
		var product = products[i].product;

		var link = $('<a></a>');
		link.append('<h3>' + product.name + '</h3>');
		link.append('<p>' + product.description + '</p>');
		link.data('product',product);
		link.click(function(e){
			e.preventDefault();

			var p = $(this).data('product');
			if(onSelect != undefined){
				onSelect(p);
			}
		});
		list.append(link);
	}
	list.find('a').wrap('<li class="product"></li>');
	container.append(list).trigger('create');
}

function renderMemberSearch(container, onSelect) {

	var bar = $('<div class="search-bar ui-bar ui-bar-c ui-grid-b"></div>');
	bar.append('<div class="ui-block-a"><input type="text" name="name" value="" placeholder="Last, First"></input></div>');
	bar.append('<div class="ui-block-b"><a style="margin-left: 10px" data-role="button">Search</a></div>');
	container.append(bar);
	container.append('<div class="results"></div>');

	var button = container.find('a');
	button.click(function(e){
		e.preventDefault();

		if(button.hasClass('disabled')) { return; }

		var name = container.find('input[name=name]').val();
		name = name.split(',');
		if(name.length != 2) {
			alert('Please specify the name as: Last, First');
			return;
		}

		var resultsContainer = container.find('.results');
		resultsContainer.empty().loading({ message : 'Searching MMS' });

		searchMembers({
			data : {
				first_name : name[1],
				last_name : name[0]
			},
			success : function(data) {
				button.removeClass('disabled');

				var list = $('<ul class="results" data-role="listview" data-split-icon="grid" data-split-theme="d"></ul>');
				for(var i = 0 ; i < data.member.length ; i++) {
					var member = data.member[i];
					var item = $('<li></li>');

					var link = $('<a></a>');
					link.append('<h3>' + member.name.first + ' ' + member.name.last + '</h3>');
					link.append('<p><strong>Member Since: ' + new Date(member.join_date).toString('MMMM yyyy') + '</strong></p>');
					link.append('<p>' + member.address.street1 + ', ' + member.address.city + ', ' + member.address.state + '</p>');
					link.data('member', member);
					link.click(function(e){
						e.preventDefault();
						if(onSelect != undefined) { 
							onSelect($(this).data('member')); 
						}
					});
					item.append(link);
					item.append('<a data-rel="dialog" data-transition="slidedown" href="' + memberPhotoUrl(member) + '"></a>');
					list.append(item);
				}

				resultsContainer.empty().append(list);
				container.trigger('create');
			}
		});
	});

}

function memberPhotoUrl(member) {
	return "<%= url('/member') %>";	
}

function renderTimeslotSelectionSchedule(results, container, onSelect) {
	container.empty().data('results', results);

	var list = $('<ul class="timeslots padded" data-role="listview"></ul>');

	var range = undefined;
	var duration = results.resource.interval * 1000;
	if(results['availability'] != undefined && results['availability'].length > 0) {
		range = [results.availability[0].start_date, results.availability[0].end_date];
	}

	if(range != undefined) {
		for(var date = range[0] ; date < range[1] ; date = new Date(date.getTime() + duration)) {
			if(date > new Date()) {
				//Lets check whether this timeslot is taken or not....
				var end = new Date(date.getTime() + (duration - 1));
			
				var meeting = undefined;
				if(results['meetings'] != undefined) {
					for(var i = 0 ; i < results.meetings.length ; i++) {
						var mtg = results.meetings[i];
						if(mtg.start_date <= date && mtg.end_date > date) {
							meeting = mtg;
						}
					}
				}

				var item = undefined;
				if(meeting == undefined) {
					item = $(BOSSAPI.utils.formatString('<li class="timeslot"><a>{time}</a></li>' , { time : date.toString('h:mm tt') }));
				}
				else {
					item = $(BOSSAPI.utils.formatString('<li class="timeslot unavailable" data-theme="b">{description}</li>', meeting));
				}
				item.data('date', date);
				item.data('availability', results.availability[0]);

				item.find('a').click(function(e){
					var date = $(this).parents('li.timeslot').data('date');
					var availability = $(this).parents('li.timeslot').data('availability');
					var results = container.data('results');

					var next = findNextMeeting(date, results['meetings']);
					var max = next != undefined ? next.start_date : results.availability[0].end_date;

					renderDurationSelection(date, max, duration, container, function(range) {
						if(onSelect != undefined) {
							onSelect({ resource : results.resource, timeslot : range });
						}
					});
				});

				list.append(item);
			}
		}
	}

	container.append(list).trigger('create');
}

function renderDurationSelection(start, max, duration, container, onSelect) {
	container.find('ul.timeslots').css('display','none');

	var durationContainer = $('<div class="duration-selection-container"></div>');

	var cleanUp = function() {
		durationContainer.remove();
		container.find('ul.timeslots').css('display','block');
		container.trigger('create');
	}

	var list = $('<ul class="durations padded" data-role="listview"></ul>');
	for( var date = start ; date < max ; date = new Date(date.getTime() + duration) ) {
		var end = new Date(date.getTime() + duration);
		var minutes = (end - start) / 60000;		

		var item = $('<a>(' + minutes + ' mins) ' + start.toString('h:mm tt') + '-' + end.toString('h:mm tt') + '</a>');
		item.data('range', [start, end]);
		list.append(item);

		item.click(function(e) {
			e.preventDefault();
			var range = $(this).data('range');
			cleanUp();
			onSelect(range);
		});
	}
	list.find('a').wrap('<li class="duration"></li>');
	durationContainer.append(list);

	var cancel = $('<a data-role="button">Cancel</a>');
	cancel.click(function(e){
		e.preventDefault();
		cleanUp();
	});
	durationContainer.append(cancel);

	container.append(durationContainer).trigger('create');
}

function refreshMyBook() {
	retrieveBook({
		success : function(data){
			var container = $('#my-book-page .ui-content');
			createBook(container, data, showClient);
		}
	});
}

function refreshMySchedule() {
	var container = $('#view-my-schedule .ui-content');
	container.empty();

	var resultsContainer = $('<div class="results"></div>');
	container.append(resultsContainer);

	var dateSelector = createDateSelection(function(date){
		loadAndDisplaySchedule(resultsContainer, date);
	});
	container.prepend(dateSelector);

	loadAndDisplaySchedule(resultsContainer, Date.today());
}

function loadAndDisplaySchedule(container, date) {
	container.empty().loading();

	if(date.getDay() != 0) {
		date = date.moveToDayOfWeek(0, -1);
	}

	var range = [ date, date.clone().add(1).weeks() ];

	BOSSAPI.scheduling.meetings.search({
		data : {
			ssoid : BOSSAPI._ssoid,
			employee_number : employee().id,
			publish : 'true,false', //Both published and non-published schedules.
			includes : 'rosters',
			date_range : range[0].toString('MM/dd/yyyy') + '-' + range[1].toString('MM/dd/yyyy')
		},
		success : function(meetings) {
			renderSchedule(container, meetings);
		}
	});
}

function renderSchedule(container, meetings) {
	container.empty();
	container.append(mySchedulePageTemplate({}));

	var last_date = undefined;

	var list = container.find('ul');
	for(var i = 0 ; i < meetings.length ; i++) {
		var meeting = meetings[i];

		var meeting_date = BOSSAPI.utils.getDatestampFromDateTime(meeting.start_date);
		if(last_date != meeting_date) {
			list.append(listDividerItemTemplate({ text : meeting.start_date.toString('ddd, MMMM d, yyyy') }));
		}
		last_date = meeting_date;	

		var item = $(meetingListTemplate(meeting));
		item.find('a').click(function(e){
			e.preventDefault();
			var meeting = $(this).parents('li.meeting').data('meeting');
			createMeetingPage(meeting);
		});
		item.data('meeting', meeting);
		list.append(item);
	}
	container.trigger( "create" );
}

function createMeetingPage(meeting) {
	$.mobile.changePage("#meeting-details");

	var container = $('#meeting-details .ui-content');
	container.empty().append(meetingPageTemplate(meeting));

	var link = $('<a></a>');
	link.text(container.find('h2').text());
	link.click(function(){
		BOSSAPI.log.dir(meeting);
	});
	container.find('h2').empty().append(link);

	var actions = container.find('.actions');

	if(meeting.hasRosters()) {
		var list = $('<ul data-role="listview" data-inset="true"></ul>');
		for(var i = 0 ; i < meeting.rosters.length ; i++) {
			var link = $('<a data-rel="dialog" href="#member-detail"></a>');
			link.data('roster', meeting.rosters[i]);
			link.click(function(e){
				var img = $('<img style="height: 390px; width: 336px;" src="<%= to('/member/photo') %>"></img>');
				$('#member-detail div[data-role=content]').empty().append(img).trigger('create');
			});
			link.text(meeting.rosters[i].member.name);
			list.append(link);
		}
		list.find('a').wrap('<li></li>');
		container.find('.rosters-container').append(list);
	}
	else {
		container.find('.rosters-container').parents('li').remove();

		var link = $('<a data-role="button"></a>');
		link.text('Schedule Member');
		link.click(function(e){
			e.preventDefault();
			resetAppointmentWizard({ meeting : meeting });
		});
		actions.append(link);
	}

	link = $('<a data-role="button">Redeem Package</a>');
	link.click(function(){
		//TODO
		alert('You will be able to redeem packages for booked reservations.  To be completed.');
	});
	actions.append(link);

	if(!meeting.isCancelled() && meeting.isCancellationAllowed()) {
		var link = $('<a class="cancel" data-role="button">Cancel Appointment</a>');
		link.click(function(e){
			if(confirm("Are you sure you wish to cancel?")) {
				meeting.cancel({
					success : function() {
						alert('Meeting was successfully cancelled.');
						window.history.back();
						refreshMySchedule();
					},
					error : function() {
						alert('This reservation cannot be cancelled.  Please see your Department Head if you need additional assistance.');
					}
				});
			}
		});
		actions.append(link);
	}

	actions.find('a:first').data('theme','b');

	$('#meeting-details').data('meeting', meeting);
	container.trigger( "create" );
}

function createBook(container, clients, onSelect) {
	container.empty();

	var list = $('<ul data-role="listview" data-filter="true" data-inset="true"></ul>');
	for(var i = 0 ; i < clients.length ; i++) {
		var listItem = $(clientListItemTemplate(clients[i].client));
		listItem.data('client', clients[i].client);

		listItem.find('a').click(function(e){
			e.preventDefault();

			var client = $(this).parents('li.client').data('client');
			if(onSelect != undefined){
				onSelect(client);
			}
		});

		list.append(listItem);
	}
	container.append(list);
	container.trigger('create');
}

function showClient(client) {
	$.mobile.changePage("#client-details");

	var container = $('#client-details');

	var contents = container.find('.ui-content');
	contents.empty().loading();

	BOSSAPI.auth.info({
		data : {
			member_id : client.member_id,
		},
		success : function(member) {
			container.find('h1').empty().text(BOSSAPI.utils.formatString('{last}, {first}', member.name));
			contents.empty().append(clientDetailTemplate(member));
			
			container.find('a.new-appointment').click(function(e){
				resetAppointmentWizard({
					member : member
				});
			});

			var actions = container.find('div.actions');
			if(member.email != undefined) {
				actions.append('<a data-role="button" href="mailto:{{' + member.email + '}}">Send Email</a>');
			}
			if(member.phone != undefined) {
				actions.append('<a data-role="button" href="tel:{{' + member.phone + '}}">Call</a>');
			}
			actions.append('<a data-role="button" data-rel="dialog" data-transition="slidedown" href="' + memberPhotoUrl(member) + '">View Photo</a>');

			container.trigger('create');

			var rosterContainer = container.find('div.rosters');
			rosterContainer.empty().loading();

			searchMemberInteraction({ 
				data : { member_id : client.member_id, includes : 'rosters' }, 
				success : function(meetings) {
					var list = $('<ul data-inset="true" data-role="listview"></ul>');
					meetings.each(function(meeting){
						var label = $('<span/>');
						label.text(BOSSAPI.utils.formatString('{date} {time} : {description} ({duration})', {
							date : formatMeetingDate(meeting),
							time : formatMeetingTime(meeting),
							description : meeting.description,
							duration : formatMeetingDuration(meeting)
						}));

						var item = $('<li/>');
						item.append(label);
						
						if(meeting.hasRosters() && meeting.rosters[0].balance > 0) {
							item.data('theme','d');
							item.find('span').wrap('<a></a>');
							item.find('a').append('<span>&nbsp;-&nbsp;Amount Due: $' + Number(meeting.rosters[0].balance).toFixed(2) + '</span>');
						}

						list.append(item);
					});
					rosterContainer.empty().append(list).trigger('create');
				} 
			});


			var packagesContainer = container.find('div.packages');
			packagesContainer.empty().loading();

			searchMemberPackages({ 
				data : { member_id : client.member_id, includes : 'product' }, 
				success : function(packages) {
					var list = $('<ul data-inset="true" data-role="listview"></ul>');
					packages.each(function(pkg){
						var label = $('<span/>');
						label.text(BOSSAPI.utils.formatString('{description} : {quantity} @ {price}', {
							description : pkg.description,
							quantity : Number(pkg.quantity),
							price : Number(pkg.per_unit_price).toFixed(2)
						}));
						var item = $('<li/>');
						item.append(label);
						list.append(item);
					});
					packagesContainer.empty().append(list).trigger('create');
				} 
			});
		},
		error : function() {
			alert('Failed to lookup member information.');
		}
	});	
}
</script>
</html>